{def boot [<int a>]
  {let b 2}
  (println (+ a b))
}

(boot 3)

{let table {dict
  {b := 2}
  {c := 3.1}
}}

{let list [1 2 3]}
{let mapped (list:map {=> [item]
  (+ item 1)
})}

{let callback {[<int a>] :=>
  (println a)
}}

(callback 2)

{def not-empty? [list]
  (!= (len list) 0)
}

(1 :+ 2)

{def max [a b]
  {case
    {when (a :< b) b}
    {else a}
  }
}
