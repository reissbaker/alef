{type single-param-hkt {kind [_]}}

{type fn-type {=> [any any] bool}}

{type generic-fn-type {where [T] {=> [T] T}}}

{type using-hkt-fn {where [<single-param-hkt F> T]
  {=> [T] (F T)}
}}

{type anon-hkt-fn
  {where [<{kind [_1 _2]} F> T1 T2]
    (F T1 T2)
  }
}

;; note: like kinds, structural types are inherently generic: they are *not*
;; TypeVals! you need to call them with a concrete type
{type using-structural-typing {interface [
  <int count>
]}}

{type hello-or-foo {|
  "hello"
  "foo"
}}

{type conditional-literal-type {where [<hello-or-foo T>]
  {case
    {when (== T "hello") "world"}
    {when (== T "foo") "bar"}
    {else never}
  }
}}

{type IVec {where [T]
  {interface [
    <(Array ((Array T) items)>
    {readable <usize capacity>}
  ]}
}

{type IntVec (Vec int)}
